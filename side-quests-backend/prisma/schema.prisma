generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String
  // When a Category is deleted, its related Projects will be deleted because
  // the cascade is defined in the Project model's category relation.
  Project Project[]
}

model Project {
  id           Int           @id @default(autoincrement())
  project_name String
  description  String?
  dificulty    Int
  // If a Category is deleted, all Projects referencing it will be removed.
  category     Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   Int
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  UserProject  UserProject[]
}

model User {
  id              Int           @id @default(autoincrement())
  username        String        @unique
  hashed_password String
  email           String        @unique
  role            String
  UserProject     UserProject[]
}

model UserProject {
  id             Int              @id @default(autoincrement())
  user           User             @relation(fields: [userId], references: [id])
  // When a Project is deleted, its related UserProject records will be removed.
  project        Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId         Int
  projectId      Int
  completed      Boolean
  StepsCompleted StepsCompleted[]

  @@unique([userId, projectId], name: "userId_projectId")
}

model Steps {
  id             Int              @id @default(autoincrement())
  description    String           
  // Cascade deletion: if a Steps record is removed, then its related breakdowns and completions are also removed.
  stepbreakdown  StepBreakdown[]
  StepsCompleted StepsCompleted[]
}

model StepBreakdown {
  id      Int   @id @default(autoincrement())
  // When the parent Steps record is deleted, delete the breakdown.
  step    Steps @relation(fields: [stepsId], references: [id], onDelete: Cascade)
  stepsId Int
  description String @unique
}

model StepsCompleted {
  id            Int         @id @default(autoincrement())
  userproject   UserProject @relation(fields: [userProjectId], references: [id], onDelete: Cascade)
  steps         Steps       @relation(fields: [stepsId], references: [id], onDelete: Cascade)
  completed     Boolean
  userProjectId Int
  stepsId       Int

  @@unique([userProjectId, stepsId])
}
